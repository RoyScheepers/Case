<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="{{ currentSite.language }}">

<head>
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta charset="utf-8" />
  <title>Websteen</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0,
      maximum-scale=1.0, user-scalable=no, viewport-fit=cover" />
  <meta name="referrer" content="origin-when-cross-origin" />

  {% css alias('@web') ~ '/web/assets/' ~ 'styles.css' with {type: 'text/css'} %}
</head>

<body>
  <div id="main">
    <div class="container">
      <div class="formulier">
        <div class="loader__wrapper hidden" id="loader__wrapper">
          <div class="loader"></div>
        </div>
        <div id="formulier">
          <select id="cars" name="cars" class="custom__select">
            <option value="1" disabled hidden selected>Kies uw merk</option>
            <option value="2">Audi</option>
            <option value="4">Bmw</option>
            <option value="13">Seat</option>
            <option value="17">Volkswagen</option>
          </select>
          <select id="model" name="model">
            <option value="1" disabled hidden selected> Kies uw model </option>
          </select>
          <select id="generatie" name="generatie">
            <option value="1" disabled hidden selected> Kies de generatie </option>
          </select>
          <select id="motortype" name="motortype">
            <option value="1" disabled hidden selected> Kies uw motortype </option>
          </select>
          <button type="submit" id="infoButton" name="infoButton" class="disabled">
            Info
          </button>
        </div>
      </div>
    </div>
    <div class="container">
      <div class="card">
        <figure class="card__figure"> </figure>
        <div class="card__body">
          <div class="card__header">
            <div id="power_standaard">
              <h2>Vermogen voor tunen: </h2>
            </div>
            <div id="power_stage_1">
              <h2>Vermogen na tunen: </h2>
            </div>
            <div id="torque_standaard">
              <h2> Koppel voor tunen: </h2>
            </div>
            <div id="torque_stage_1">
              <h2>Koppel na tunen: </h2>
            </div>
            <h2>motorspecificaties: </h2>
            <ul>
              <li>
                Cilinder inhoud: info uit api
              </li>
              <li>
                Compressieverhouding: info uit api
              </li>
              <li>
                Type ecu: info uit api
              </li>
              <li>
                Boring X slag: info uit api
              </li>
              <li>
                Motornummer: info uit api
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>

    <script>
      (() => {
        // creates values and models for dropdown field "kies uw model"

        const carField = Array.from(document.querySelectorAll('[name="cars"]'));
        const infoButton = Array.from(document.querySelectorAll('[name="infoButton"]'));
        infoButton.forEach(e => e.disabled = true);
        carField.forEach((a) => a.addEventListener('change', () => {
          const carValue = a.value;
          if (carField.filter(carField => carField.value).length === carField.length) {
            document.getElementById("loader__wrapper").classList.remove('hidden');
            fetch(`/Api/available/models/${carValue}`, {
              method: 'GET',
            }).then(response => response.json()).then((carRes) => {
              document.getElementById("loader__wrapper").classList.add('hidden');
              if (carRes) {
                let carData = [];
                let carDataSet = [];
                carRes.forEach((val, index) => {
                  if (carRes[index] !== null) {
                    for (let i in carRes[index]) {
                      carData.push(carRes[index][i]);
                    }
                    carDataSet.push(carData);
                    carData = [];
                  }
                })
                carDataSet.forEach((el) => {
                  const select = document.getElementById('model');
                  const option = document.createElement('option');
                  option.text = el[1];
                  option.value = el[0];
                  select.add(option);
                })
              }
            })
          }
        })
        )
        // creates values and generations for dropdown field "kies de generatie"
        const modelField = Array.from(document.querySelectorAll('[name="model"]'));
        modelField.forEach((a) => a.addEventListener('change', () => {
          const modelValue = a.value;
          if (modelField.filter(modelField => modelField.value).length === modelField.length) {
            document.getElementById("loader__wrapper").classList.remove('hidden');
            fetch(`Api/available/makesgeneration/${modelValue}`, {
              method: 'GET',
            }).then(response => response.json()).then((modelRes) => {
              document.getElementById("loader__wrapper").classList.add('hidden');
              if (modelRes) {
                let modelData = [];
                let modelDataSet = [];
                modelRes.forEach((val, index) => {
                  if (modelRes[index] !== null) {
                    for (let i in modelRes[index]) {
                      modelData.push(modelRes[index][i]);
                    }
                    modelDataSet.push(modelData);
                    modelData = [];
                  }
                })
                
                modelDataSet.forEach((el) => {
                  const select = document.getElementById('generatie');
                  const option = document.createElement('option');
                  option.text = el[1];
                  option.value = el[0];
                  select.add(option);
                })
              }
            })
          }
        }))
        // creates values and engines for dropdown field "kies uw motortype"
        const generationField = Array.from(document.querySelectorAll('[name="generatie"]'));
        generationField.forEach((a) => a.addEventListener('change', () => {
          const generationValue = a.value;
          if (generationField.filter(generationField => generationField.value).length === generationField.length) {
            document.getElementById("loader__wrapper").classList.remove('hidden');
            fetch(`Api/available/makesenginetype/${generationValue}`, {
              method: 'GET',
            }).then(response => response.json()).then((generationRes) => {
              document.getElementById("loader__wrapper").classList.add('hidden');
              if (generationRes) {
                let generationData = [];
                let generationDataSet = [];
                generationRes.forEach((val, index) => {
                  if (generationRes[index] !== null) {
                    for (let i in generationRes[index]) {
                      generationData.push(generationRes[index][i]);
                    }
                    generationDataSet.push(generationData);
                    generationData = [];
                  }
                })
                generationDataSet.forEach((el) => {
                  const select = document.getElementById('motortype');
                  const option = document.createElement('option');
                  option.text = el[1];
                  option.value = el[0];
                  select.add(option);
                })
              }
            })
          }
        }
        )
        )

        const enginetypeField = Array.from(document.querySelectorAll('[name="motortype"]'));
        enginetypeField.forEach((a) => a.addEventListener('change', () => {
          const el = document.getElementById("motortype");
          const engineValue = el.value;
        }))
        // eventlisteren for the submit button 
        infoButton.forEach((a) => a.addEventListener('click', () => {
          const enginetypeEl = document.getElementById("motortype");
          const enginetypeValue = enginetypeEl.value;
          fetch(`Api/available/makesecutype/${enginetypeValue}`, {
            method: 'GET',
          }).then(response => response.json()).then((ecuRes) => {
             
                
            ecuRes.forEach((el, val ) => {                   
              const option = document.createElement("p");
                const node = document.createTextNode(el);
                option.appendChild(node);
                const element = document.getElementById(val);
                element.appendChild(option);
            })
          })
        }))
        if (modelField) {
          infoButton.forEach(e => e.disabled = false);
        } else {
          infoButton.forEach(e => e.disabled = true);
          document.getElementById("loader__wrapper").classList.add('hidden');
        }


      }
      )();

    </script>

</body>

</html>