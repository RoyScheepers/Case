{% extends "index.twig" %}

{% set docTitle = 'Homepage' %}

{% set bodyAttributes = {
class: 'ltr'
} %}

{% block head %}
{{ parent() }}
{% endblock %}

{% block header %}
{{ parent() }}
{% endblock %}


{% block body %}
<div class="grid-container">
    <div class="formulier">
        <div class="loader__wrapper hidden" id="loader__wrapper">
            <div class="loader"></div>
        </div>
        <div id="formulier"> {% set form = craft.formie.forms.handle('emailer').one() %}
            {{ craft.formie.renderForm('emailer') }}
        </div>
    </div>
</div>

<script>
    (() => {
        const fields = Array.from(document.querySelectorAll('[name="fields[firstname]"], [name="fields[lastname]"], [name="fields[emailAdres]"], [name="fields[laatEenBerichtAchter]"]'));
        const Submit = Array.from(document.querySelectorAll('[data-submit-action="submit"]'));
        Submit.forEach(e => e.disabled = true)
        fields.forEach
        const getModifier = (name) => {
            const naamModifier = name.match(/fields\[(\w+)]/);
            if (naamModifier && naamModifier[1]) {
                return { type: 'name', modifier: naamModifier[1] };
            }
            return null;
        }
        fields.forEach((a) => a.addEventListener('keyup', () => {
            if (a.value.length === 0) {
                const { type, modifier } = getModifier(a.name);
                hideError(`#error${modifier[0].toUpperCase()}${modifier.slice(1)}`);
            }
            const nonValidFields = fields.filter((el) => {
                if (el.value.length === 0) {
                    return true;
                }
                const { type, modifier } = getModifier(el.name);
                if (type === 'name') return !validateGegevens(modifier, el);
                return false;
            });
            if (nonValidFields.length === 0) {
                Submit.forEach(e => e.disabled = false);
            } else {
                Submit.forEach(e => e.disabled = true);
            }
        }));

        const showError = (fieldname, showErrorName) => {
            const errorMessage = document.querySelector(`${showErrorName}`);
            if (errorMessage < 1) {
                var tag = document.createElement("p");
                tag.id = `${showErrorName}`
                var text = document.createTextNode('Oeps er is iets fout gegaan');
                tag.appendChild(text);
                var el = document.querySelector(`${fieldname}`);
                el.parentElement.appendChild(tag);
            }
        }
        const hideError = (hideErrorName) => {
            const errorMessage = document.querySelector(`${hideErrorName}`);
            if (errorMessage !== null) {
                errorMessage.parentElement.removeChild(errorMessage);

            }
        }
        const validateGegevens = (modifierGegevens, a) => {
            let dataNaamGegevens;
            switch (modifierGegevens) {
                case 'firstname':
                    dataNaamGegevens = a.closest(`[data-valid-voornaam]`).dataset.validVoornaam;
                    const errorVoornaam = document.querySelector('[id="errorFirstname"]');
                    if (dataNaamGegevens) {
                        voornaam = (new RegExp(dataNaamGegevens)).test(a.value);
                        if (voornaam === true) {
                            hideError('#errorFirstname');
                            return true;
                        } else if (voornaam === false) {
                            if (errorVoornaam < 1) {
                                showError('[name="fields[firstname]"]', 'errorFirstname');
                            }
                            return false;
                        }
                    }
                    break;
                case 'lastname':
                    dataNaamGegevens = a.closest(`[data-valid-achternaam]`).dataset.validAchternaam;
                    const errorAchternaam = document.querySelector('[id="errorLastname"]');
                    if (dataNaamGegevens) {
                        achternaam = (new RegExp(dataNaamGegevens)).test(a.value) !== false;
                        if (achternaam === true) {
                            hideError('#errorLastname');
                            return true;
                        } else if (achternaam === false) {
                            if (errorAchternaam < 1) {
                                showError('[name="fields[lastname]"]', 'errorLastname');
                            }
                            return false;
                        }
                    }
                    break;
                case 'emailAdres':
                    dataNaamGegevens = a.closest(`[data-valid-emailadres]`).dataset.validEmailadres;
                    const errorEmailAdres = document.querySelector('[id="errorEmailAdres"]');
                    if (dataNaamGegevens) {
                        emailAdres = (new RegExp(dataNaamGegevens)).test(a.value) !== false;
                        if (emailAdres === true) {
                            hideError('#errorEmailAdres');
                            return true;
                        } else if (emailAdres === false) {
                            if (errorEmailAdres < 1) {
                                showError('[name="fields[emailAdres]"]', 'errorEmailAdres');
                            }
                            return false;
                        }
                    }
                    break;

                case 'laatEenBerichtAchter':
                    dataNaamGegevens = a.closest(`[data-valid-bericht]`).dataset.validBericht;
                    const errorBericht = document.querySelector('[id="errorLaatEenBerichtAchter"]');
                    if (dataNaamGegevens) {
                        laatEenBerichtAchter = (new RegExp(dataNaamGegevens)).test(a.value) !== false;
                        if (laatEenBerichtAchter === true) {
                            hideError('#errorLaatEenBerichtAchter');
                            return true;
                        } else if (laatEenBerichtAchter == false) {
                            if (errorBericht < 1) {
                                showError('[name="fields[laatEenBerichtAchter]"]', 'errorLaatEenBerichtAchter')
                            }
                            return false;
                        }
                    }
                    break;
                default: false;
            }
            return true;
        }
    }
    )();
</script>
{% endblock %}