/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/fields/conditions.js":
/*!*************************************!*\
  !*** ./src/js/fields/conditions.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FormieConditions\": () => (/* binding */ FormieConditions)\n/* harmony export */ });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils */ \"./src/js/utils/utils.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\nvar FormieConditions = /*#__PURE__*/function () {\n  function FormieConditions() {\n    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, FormieConditions);\n\n    this.$form = settings.$form;\n    this.form = this.$form.form; // Best-practice for storing data keyed by DOM nodes\n    // https://fitzgeraldnick.com/2014/01/13/hiding-implementation-details-with-e6-weakmaps.html\n\n    this.conditionsStore = new WeakMap();\n    this.initFieldConditions();\n  }\n\n  _createClass(FormieConditions, [{\n    key: \"initFieldConditions\",\n    value: function initFieldConditions() {\n      var _this = this;\n\n      this.$form.querySelectorAll('[data-field-conditions]').forEach(function ($field) {\n        var conditionSettings = _this.parseJsonConditions($field);\n\n        if (!conditionSettings || !conditionSettings.conditions.length) {\n          return;\n        } // Store the conditions against the target field object for later access/testing\n\n\n        var conditions = [];\n        conditionSettings.conditions.forEach(function (condition) {\n          // Get the field(s) we're targeting to watch for changes. Note we need to handle multiple fields (checkboxes)\n          var $targets = _this.$form.querySelectorAll(\"[name=\\\"\".concat(condition.field, \"\\\"]\")); // Check if we're dealing with multiple fields, like checkboxes. This overrides the above\n\n\n          var $multiFields = _this.$form.querySelectorAll(\"[name=\\\"\".concat(condition.field, \"[]\\\"]\"));\n\n          if ($multiFields.length) {\n            $targets = $multiFields;\n          } // Special handling for Repeater/Groups that have `new1` in their name but for page reload forms\n          // this will be replaced by the blockId, and will fail to match the conditions settings.\n\n\n          if ((!$targets || !$targets.length) && condition.field.includes('[new1]')) {\n            // Get tricky with Regex. Find the element that matches everything except `[new1]` for `[1234]`.\n            // Escape special characters `[]` in the string, and swap `[new1]` with `[\\d+]`.\n            var regexString = condition.field.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&').replace(/new1/g, '\\\\d+'); // Find all targets via Regex.\n\n            $targets = _this.querySelectorAllRegex(new RegExp(regexString), 'name');\n          }\n\n          if (!$targets || !$targets.length) {\n            return;\n          } // Store the conditions with the target field for later access/testing\n\n\n          condition.$targets = $targets;\n          conditions.push(condition);\n          $targets.forEach(function ($target) {\n            // Get the right event for the field\n            var eventType = _this.getEventType($target); // Watch for changes on the target field. When one occurs, fire off a custom event on the source field\n            // We need to do this because target fields can be targetted by multiple conditions, and source\n            // fields can have multiple conditions - we need to check them all for all/any logic.\n\n\n            _this.form.addEventListener($target, (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.eventKey)(eventType), function () {\n              return $field.dispatchEvent(new CustomEvent('onFormieEvaluateConditions', {\n                bubbles: true,\n                detail: {\n                  conditions: _this\n                }\n              }));\n            });\n          });\n        }); // Save our condition settings and targets against the origin fields. We'll use this to evaluate conditions\n\n        _this.conditionsStore.set($field, {\n          showRule: conditionSettings.showRule,\n          conditionRule: conditionSettings.conditionRule,\n          isNested: conditionSettings.isNested || false,\n          conditions: conditions\n        }); // Add a custom event listener to fire when the field event listener fires\n\n\n        _this.form.addEventListener($field, (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.eventKey)('onFormieEvaluateConditions'), _this.evaluateConditions.bind(_this)); // Also - trigger the event right now to evaluate immediately. Namely if we need to hide\n        // field that are set to show if conditions are met. Pass in a param to let fields know if this is \"init\".\n\n\n        $field.dispatchEvent(new CustomEvent('onFormieEvaluateConditions', {\n          bubbles: true,\n          detail: {\n            conditions: _this,\n            init: true\n          }\n        }));\n      }); // Update the form hash, so we don't get change warnings\n\n      if (this.form.formTheme) {\n        this.form.formTheme.updateFormHash();\n      }\n    }\n  }, {\n    key: \"evaluateConditions\",\n    value: function evaluateConditions(e) {\n      var _this2 = this;\n\n      var $field = e.target;\n      var isInit = e.detail ? e.detail.init : false; // Get the prepped conditions for this field\n\n      var conditionSettings = this.conditionsStore.get($field);\n\n      if (!conditionSettings) {\n        return;\n      }\n\n      var showRule = conditionSettings.showRule,\n          conditionRule = conditionSettings.conditionRule,\n          conditions = conditionSettings.conditions,\n          isNested = conditionSettings.isNested;\n      var results = {};\n      conditions.forEach(function (condition, i) {\n        var logic = condition.condition,\n            value = condition.value,\n            $targets = condition.$targets,\n            field = condition.field; // We're always dealing with a collection of targets, even if the target is a text field\n        // The reason being is this normalises behaviour for some fields (checkbox/radio) that\n        // have multiple fields in a group.\n\n        $targets.forEach(function ($target) {\n          var result = false;\n          var testOptions = {};\n          var tagName = $target.tagName.toLowerCase();\n          var inputType = $target.getAttribute('type') ? $target.getAttribute('type').toLowerCase() : ''; // Create a key for this condition rule that we'll use to store (potentially multiple) results against.\n          // It's not visibly needed for anything, but using the target's field name helps with debugging.\n\n          var resultKey = \"\".concat(field, \"_\").concat(i); // Store all results as an array, and we'll normalise afterwards. Group results by their condition rule.\n          // For example: { dropdown_0: [false], radio_1: [true, false] }\n\n          if (!results[resultKey]) {\n            results[resultKey] = [];\n          } // Handle some special options like dates - tell our condition tester about them\n\n\n          if (inputType === 'date') {\n            testOptions.isDate = true;\n          } // Handle agree fields, which are a single checkbox, checked/unchecked\n\n\n          if ($target.getAttribute('data-fui-input-type') === 'agree') {\n            // Ignore the empty, hidden checkbox\n            if (inputType === 'hidden') {\n              return;\n            } // Convert the value to boolean to compare\n\n\n            result = _this2.testCondition(logic, value == '0' ? false : true, $target.checked);\n            results[resultKey].push(result);\n          } else if (inputType === 'checkbox' || inputType === 'radio') {\n            // Handle (multi) checkboxes and radio, which are a bit of a pain\n            result = _this2.testCondition(logic, value, $target.value) && $target.checked;\n            results[resultKey].push(result);\n          } else if (tagName === 'select' && $target.hasAttribute('multiple')) {\n            // Handle multi-selects\n            Array.from($target.options).forEach(function ($option) {\n              result = _this2.testCondition(logic, value, $option.value) && $option.selected;\n              results[resultKey].push(result);\n            });\n          } else {\n            result = _this2.testCondition(logic, value, $target.value, testOptions);\n            results[resultKey].push(result);\n          }\n        });\n      }); // Normalise the results before going further, as this'll be keyed as an object, so convert to an array\n      // and because we can have multiple inputs, each with their own value, reduce them to a single boolean.\n      // For example: { dropdown_0: [false], radio_1: [true, false] } changes to [false, true].\n\n      var normalisedResults = [];\n      Object.values(results).forEach(function (result) {\n        normalisedResults.push(result.includes(true));\n      });\n      var finalResult = false; // Check to see how to compare the result (any or all).\n\n      if (normalisedResults.length) {\n        if (conditionRule === 'all') {\n          // Are _all_ the conditions the same?\n          finalResult = normalisedResults.every(function (val) {\n            return val === true;\n          });\n        } else {\n          finalResult = normalisedResults.includes(true);\n        }\n      } // Check if this condition is nested in a Group/Repeater field. Only proceed if the parent field\n      // conditional evaluation has passed.\n\n\n      var overrideResult = false; // But *do* setup conditions on the first run, when initialising all the fields\n\n      if (isNested && !isInit) {\n        var $parentField = $field.closest('[data-field-type=\"group\"], [data-field-type=\"repeater\"]');\n\n        if ($parentField) {\n          // Is the parent field conditionally hidden? Force the evaluation to be true (this field is\n          // is conditionallu hidden), to prevent inner field conditions having a higher priority than the\n          // parent Group/Repeater fields.\n          if ($parentField.conditionallyHidden) {\n            overrideResult = true;\n          }\n        }\n      } // Show or hide? Also toggle the disabled state to sort out any hidden required fields\n\n\n      if (overrideResult || finalResult && showRule !== 'show' || !finalResult && showRule === 'show') {\n        $field.conditionallyHidden = true;\n        $field.setAttribute('data-conditionally-hidden', true);\n        $field.querySelectorAll('input, textarea, select').forEach(function ($input) {\n          $input.setAttribute('disabled', true);\n        });\n      } else {\n        $field.conditionallyHidden = false;\n        $field.removeAttribute('data-conditionally-hidden');\n        $field.querySelectorAll('input, textarea, select').forEach(function ($input) {\n          $input.removeAttribute('disabled');\n        });\n      } // Fire an event to notify that the field's conditions have been evaluated\n\n\n      $field.dispatchEvent(new CustomEvent('onAfterFormieEvaluateConditions', {\n        bubbles: true,\n        detail: {\n          conditions: this,\n          init: isInit\n        }\n      }));\n    }\n  }, {\n    key: \"parseJsonConditions\",\n    value: function parseJsonConditions($field) {\n      var json = $field.getAttribute('data-field-conditions');\n\n      if (json) {\n        try {\n          return JSON.parse(json);\n        } catch (e) {\n          console.error(\"Unable to parse JSON conditions: \".concat(e));\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getEventType\",\n    value: function getEventType($field) {\n      var tagName = $field.tagName.toLowerCase();\n      var inputType = $field.getAttribute('type') ? $field.getAttribute('type').toLowerCase() : '';\n\n      if (tagName === 'select' || inputType === 'date') {\n        return 'change';\n      }\n\n      if (inputType === 'number') {\n        return 'input';\n      }\n\n      if (inputType === 'checkbox' || inputType === 'radio') {\n        return 'click';\n      }\n\n      return 'keyup';\n    }\n  }, {\n    key: \"testCondition\",\n    value: function testCondition(logic, value, fieldValue) {\n      var testOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var result = false; // Are we dealing with dates? That's a whole other mess...\n\n      if (testOptions.isDate) {\n        value = new Date(value).valueOf();\n        fieldValue = new Date(fieldValue).valueOf();\n      }\n\n      if (logic === '=') {\n        result = value === fieldValue;\n      } else if (logic === '!=') {\n        result = value !== fieldValue;\n      } else if (logic === '>') {\n        result = parseFloat(fieldValue, 10) > parseFloat(value, 10);\n      } else if (logic === '<') {\n        result = parseFloat(fieldValue, 10) < parseFloat(value, 10);\n      } else if (logic === 'contains') {\n        result = fieldValue.includes(value);\n      } else if (logic === 'startsWith') {\n        result = fieldValue.startsWith(value);\n      } else if (logic === 'endsWith') {\n        result = fieldValue.endsWith(value);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"querySelectorAllRegex\",\n    value: function querySelectorAllRegex(regex, attributeToSearch) {\n      var output = [];\n\n      var _iterator = _createForOfIteratorHelper(this.$form.querySelectorAll(\"[\".concat(attributeToSearch, \"]\"))),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var element = _step.value;\n\n          if (regex.test(element.getAttribute(attributeToSearch))) {\n            output.push(element);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return output;\n    }\n  }]);\n\n  return FormieConditions;\n}();\nwindow.FormieConditions = FormieConditions;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/fields/conditions.js\n");

/***/ }),

/***/ "./src/js/utils/utils.js":
/*!*******************************!*\
  !*** ./src/js/utils/utils.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"eventKey\": () => (/* binding */ eventKey),\n/* harmony export */   \"isEmpty\": () => (/* binding */ isEmpty),\n/* harmony export */   \"toBoolean\": () => (/* binding */ toBoolean)\n/* harmony export */ });\nvar isEmpty = function isEmpty(obj) {\n  return obj && Object.keys(obj).length === 0 && obj.constructor === Object;\n};\nvar toBoolean = function toBoolean(val) {\n  return !/^(?:f(?:alse)?|no?|0+)$/i.test(val) && !!val;\n};\nvar eventKey = function eventKey(eventName) {\n  var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (!namespace) {\n    namespace = Math.random().toString(36).substr(2, 5);\n  }\n\n  return \"\".concat(eventName, \".\").concat(namespace);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMvdXRpbHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sSUFBTUEsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBU0MsR0FBVCxFQUFjO0VBQ2pDLE9BQU9BLEdBQUcsSUFBSUMsTUFBTSxDQUFDQyxJQUFQLENBQVlGLEdBQVosRUFBaUJHLE1BQWpCLEtBQTRCLENBQW5DLElBQXdDSCxHQUFHLENBQUNJLFdBQUosS0FBb0JILE1BQW5FO0FBQ0gsQ0FGTTtBQUlBLElBQU1JLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQVNDLEdBQVQsRUFBYztFQUNuQyxPQUFPLENBQUMsMkJBQTJCQyxJQUEzQixDQUFnQ0QsR0FBaEMsQ0FBRCxJQUF5QyxDQUFDLENBQUNBLEdBQWxEO0FBQ0gsQ0FGTTtBQUlBLElBQU1FLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVNDLFNBQVQsRUFBc0M7RUFBQSxJQUFsQkMsU0FBa0IsdUVBQU4sSUFBTTs7RUFDMUQsSUFBSSxDQUFDQSxTQUFMLEVBQWdCO0lBQ1pBLFNBQVMsR0FBR0MsSUFBSSxDQUFDQyxNQUFMLEdBQWNDLFFBQWQsQ0FBdUIsRUFBdkIsRUFBMkJDLE1BQTNCLENBQWtDLENBQWxDLEVBQXFDLENBQXJDLENBQVo7RUFDSDs7RUFFRCxpQkFBVUwsU0FBVixjQUF1QkMsU0FBdkI7QUFDSCxDQU5NIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3V0aWxzL3V0aWxzLmpzP2Q5ZWUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGlzRW1wdHkgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufTtcblxuZXhwb3J0IGNvbnN0IHRvQm9vbGVhbiA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHJldHVybiAhL14oPzpmKD86YWxzZSk/fG5vP3wwKykkL2kudGVzdCh2YWwpICYmICEhdmFsO1xufTtcblxuZXhwb3J0IGNvbnN0IGV2ZW50S2V5ID0gZnVuY3Rpb24oZXZlbnROYW1lLCBuYW1lc3BhY2UgPSBudWxsKSB7XG4gICAgaWYgKCFuYW1lc3BhY2UpIHtcbiAgICAgICAgbmFtZXNwYWNlID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDUpO1xuICAgIH1cblxuICAgIHJldHVybiBgJHtldmVudE5hbWV9LiR7bmFtZXNwYWNlfWA7XG59O1xuIl0sIm5hbWVzIjpbImlzRW1wdHkiLCJvYmoiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiY29uc3RydWN0b3IiLCJ0b0Jvb2xlYW4iLCJ2YWwiLCJ0ZXN0IiwiZXZlbnRLZXkiLCJldmVudE5hbWUiLCJuYW1lc3BhY2UiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/utils/utils.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/fields/conditions.js");
/******/ 	
/******/ })()
;